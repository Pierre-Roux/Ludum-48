-- Niveau
mapObject0 = require("maps/panel0")
map0 = mapObject0.layers[1].data
mapObject1 = require("maps/panel1")
map1 = mapObject1.layers[1].data
twoDimMap = {}
mapsTable = {}

tileTypes = {}

TILE_HEIGHT = 32
TILE_WIDTH = 32

tileSheet = nil
tileTextures = {}

function initMap()
  
  -- Turn the 1D map generated by Tiled to a 2D map
  twoDimMap0 = turnOneDimTableToTwoDimTable(map0, 23, 40)
  twoDimMap1 = turnOneDimTableToTwoDimTable(map1, 23, 40)
  table.insert(mapsTable, twoDimMap0)
  table.insert(mapsTable, twoDimMap1)
  table.insert(mapsTable, twoDimMap0)
  table.insert(mapsTable, twoDimMap1)
  table.insert(mapsTable, twoDimMap0)
  
  -- Merge the panels horizontally (append)
  twoDimMap = mergePanelsHorizontally(mapsTable)
  
  for i=1,10 do
    tileTypes[i] = "sol"
  end
  
  -- Load textures from tilesheet
  print("game : initiating textures loading")
  tileSheet = love.graphics.newImage("images/tileSheet1.png")
  local nbColumns = tileSheet:getWidth()/TILE_WIDTH
  local nbRows = tileSheet:getHeight()/TILE_HEIGHT
  
  tileTextures[0] = nil
  
  local r, c
  local id = 1
  for r=1,nbRows do
    for c=1,nbColumns do
      tileTextures[id] = love.graphics.newQuad(
        (c-1)*TILE_WIDTH,
        (r-1)*TILE_HEIGHT,
        TILE_WIDTH,
        TILE_HEIGHT,
        tileSheet:getWidth(),
        tileSheet:getHeight()
        )
      id = id + 1
    end
  end
  print("game : textures successfully loaded")
end

function drawMap()
  -- Draw map
  local row, col
  local x, y
  
  x = 0
  y = 0
  for row = 1, 23 do
    for col = 1, 40*5 do
      -- Draw tile
      local tile = twoDimMap[row][col]
      local texQuad = tileTextures[tile]
      if tile > 0 then
        love.graphics.draw(tileSheet, texQuad, x, y, 0, 1, 1)
      end
      x = x + TILE_WIDTH
    end
    x = 0
    y = y + TILE_HEIGHT
  end
end

function mergePanelsHorizontally(mapsTable)
  local mergedMap
  mergedMap = mapsTable[1]
  
  for n=1,#mapsTable-1 do
    for i=1,#mapsTable[n+1] do
      for ii=1, #mapsTable[n+1][i] do
        table.insert(mergedMap[i],mapsTable[n+1][i][ii])
      end
    end
  end
  
  
  --for i=1,#mapsTable[2] do
	 --for ii=1, #mapsTable[2][i] do
		 --table.insert(mergedMap[i],mapsTable[2][i][ii])
	 --end
  --end
  
  return mergedMap
end

