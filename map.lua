-- Niveau
-- ToDo : make generic
mapObject_0 = require("maps/map_0")
map_0 = mapObject_0.layers[1].data
mapObject_0_2 = require("maps/map_0_2")
map_0_2 = mapObject_0_2.layers[1].data
mapObject_D_1 = require("maps/map_D_1")
map_D_1 = mapObject_D_1.layers[1].data
mapObject_D_2 = require("maps/map_D_2")
map_D_2 = mapObject_D_2.layers[1].data
mapObject_ED_1 = require("maps/map_ED_1")
map_ED_1 = mapObject_ED_1.layers[1].data
mapObject_ED_2 = require("maps/map_ED_2")
map_ED_2 = mapObject_ED_2.layers[1].data
mapObject_EG_1 = require("maps/map_EG_1")
map_EG_1 = mapObject_EG_1.layers[1].data
mapObject_EG_2 = require("maps/map_EG_2")
map_EG_2 = mapObject_EG_2.layers[1].data
mapObject_G_1 = require("maps/map_G_1")
map_G_1 = mapObject_G_1.layers[1].data
mapObject_G_2 = require("maps/map_G_2")
map_G_2 = mapObject_G_2.layers[1].data

twoDimMap = {}
mapsTable = {}

farLeftPanelsTable = {}
leftPanelsTable = {}
centerPanelsTable = {}
rightPanelsTable = {}
farRightPanelsTable = {}

tileTypes = {}

TILE_HEIGHT = 32
TILE_WIDTH = 32

tileSheet = nil
tileTextures = {}

math.randomseed(os.time())

function initMap()
  
  -- Turn the 1D map generated by Tiled to a 2D map
  twoDimMap_0 = turnOneDimTableToTwoDimTable(map_0, 23, 40)
  twoDimMap_0_2 = turnOneDimTableToTwoDimTable(map_0_2, 23, 40)
  twoDimMap_D_1 = turnOneDimTableToTwoDimTable(map_D_1, 23, 40)
  twoDimMap_D_2 = turnOneDimTableToTwoDimTable(map_D_2, 23, 40)
  twoDimMap_ED_1 = turnOneDimTableToTwoDimTable(map_ED_1, 23, 40)
  twoDimMap_ED_2 = turnOneDimTableToTwoDimTable(map_ED_2, 23, 40)
  twoDimMap_EG_1 = turnOneDimTableToTwoDimTable(map_EG_1, 23, 40)
  twoDimMap_EG_2 = turnOneDimTableToTwoDimTable(map_EG_2, 23, 40)
  twoDimMap_G_1 = turnOneDimTableToTwoDimTable(map_G_1, 23, 40)
  twoDimMap_G_2 = turnOneDimTableToTwoDimTable(map_G_2, 23, 40)
  
  populatePanelTables()
  
  table.insert(mapsTable, farLeftPanelsTable[ math.random( #farLeftPanelsTable ) ])
  table.insert(mapsTable, leftPanelsTable[ math.random( #leftPanelsTable ) ])
  table.insert(mapsTable, centerPanelsTable[ math.random( #centerPanelsTable ) ])
  table.insert(mapsTable, rightPanelsTable[ math.random( #rightPanelsTable ) ])
  table.insert(mapsTable, farRightPanelsTable[ math.random( #farRightPanelsTable ) ])
  
  -- Merge the panels horizontally (append)
  twoDimMap = mergePanelsHorizontally(mapsTable)
  
  for i=1,8 do
    tileTypes[i] = "fill"
  end
  
  -- Load textures from tilesheet
  tileSheet = love.graphics.newImage("images/tileSheet1.png")
  local nbColumns = tileSheet:getWidth()/TILE_WIDTH
  local nbRows = tileSheet:getHeight()/TILE_HEIGHT
  
  tileTextures[0] = nil
  
  local r, c
  local id = 1
  for r=1,nbRows do
    for c=1,nbColumns do
      tileTextures[id] = love.graphics.newQuad(
        (c-1)*TILE_WIDTH,
        (r-1)*TILE_HEIGHT,
        TILE_WIDTH,
        TILE_HEIGHT,
        tileSheet:getWidth(),
        tileSheet:getHeight()
        )
      id = id + 1
    end
  end
end

function drawMap()
  -- Draw map
  local row, col
  local x, y
  
  x = 0
  y = 0
  for row = 1, 23 do
    for col = 1, 40*5 do
      -- Draw tile
      local tile = twoDimMap[row][col]
      local texQuad = tileTextures[tile]
      if tile > 0 then
        love.graphics.draw(tileSheet, texQuad, x, y, 0, 1, 1)
      end
      x = x + TILE_WIDTH
    end
    x = 0
    y = y + TILE_HEIGHT
  end
end

function mergePanelsHorizontally(mapsTable)
  local mergedMap
  mergedMap = mapsTable[1]
  
  for n=1,#mapsTable-1 do
    for i=1,#mapsTable[n+1] do
      for ii=1, #mapsTable[n+1][i] do
        table.insert(mergedMap[i],mapsTable[n+1][i][ii])
      end
    end
  end
  
  return mergedMap
end

function populatePanelTables()
  table.insert(farLeftPanelsTable, twoDimMap_EG_1)
  table.insert(farLeftPanelsTable, twoDimMap_EG_2)
  table.insert(leftPanelsTable, twoDimMap_G_1)
  table.insert(leftPanelsTable, twoDimMap_G_2)
  table.insert(centerPanelsTable, twoDimMap_0)
  table.insert(centerPanelsTable, twoDimMap_0_2)
  table.insert(rightPanelsTable, twoDimMap_D_1)
  table.insert(rightPanelsTable, twoDimMap_D_2)
  table.insert(farRightPanelsTable, twoDimMap_ED_1)
  table.insert(farRightPanelsTable, twoDimMap_ED_2)
end
