-- Niveau
-- ToDo : make generic
mapObject_O1 = require("maps/maphall_ph_v0")
map_O1 = mapObject_O1.layers[1].data

mapObject_O2 = require("maps/maphall_long_ph_v1")
map_O2 = mapObject_O2.layers[1].data

mapObject_C1 = require("maps/map0_ph_v1")
map_C1 = mapObject_C1.layers[1].data

mapObject_R1 = require("maps/mapr_ph_v0")
map_R1 = mapObject_R1.layers[1].data

mapObject_L1 = require("maps/mapl_ph_v0")
map_L1 = mapObject_L1.layers[1].data

twoDimMap = {}
mapsTable = {}
currentMap = {}

leftPanelsTable = {}
otherPanelsTable = {}
centerPanelsTable = {}
rightPanelsTable = {}

tileTypes = {}

TILE_HEIGHT = 32
TILE_WIDTH = 32

currentMapH = 0
currentMapW = 0

twoDimMap = 3

tileSheet = nil
tileTextures = {}

math.randomseed(os.time())

function initPartialMap()
  
  --wall
  for i=1,12 do
    tileTypes[i] = "fill"
  end
  
  --doorqqqqqEIGHT
  currentMapW = collenght*TILE_WIDTH
  
end

function initMap()
  
  -- Turn the 1D map generated by Tiled to a 2D map
  twoDimMap_C1 = turnOneDimTableToTwoDimTable(map_C1, 30, 55)

  twoDimMap_L1 = turnOneDimTableToTwoDimTable(map_L1, 30, 55)
  
  twoDimMap_R1 = turnOneDimTableToTwoDimTable(map_R1, 30, 55)
  
  twoDimMap_O1 = turnOneDimTableToTwoDimTable(map_O1, 30, 55)
  twoDimMap_O2 = turnOneDimTableToTwoDimTable(map_O2, 28, 70)
  
  populatePanelTables()
  
  mapsTable = {}
  
  table.insert(mapsTable, leftPanelsTable[ math.random( #leftPanelsTable ) ])
  table.insert(mapsTable, otherPanelsTable[ math.random( #otherPanelsTable ) ])
  table.insert(mapsTable, centerPanelsTable[ math.random( #centerPanelsTable ) ])
  table.insert(mapsTable, otherPanelsTable[ math.random( #otherPanelsTable ) ])
  table.insert(mapsTable, rightPanelsTable[ math.random( #rightPanelsTable ) ])
  
  --wall
  for i=1,12 do
    tileTypes[i] = "fill"
  end
  
  --door
  for i=13,24 do
    tileTypes[i] = "fill"
  end
  
  -- Load textures from tilesheet
  tileSheet = love.graphics.newImage("images/tileSheet1.png")
  local nbColumns = tileSheet:getWidth()/TILE_WIDTH
  local nbRows = tileSheet:getHeight()/TILE_HEIGHT
  
  tileTextures[0] = nil
  
  local r, c
  local id = 1
  for r=1,nbRows do
    for c=1,nbColumns do
      tileTextures[id] = love.graphics.newQuad(
        (c-1)*TILE_WIDTH,
        (r-1)*TILE_HEIGHT,
        TILE_WIDTH,
        TILE_HEIGHT,
        tileSheet:getWidth(),
        tileSheet:getHeight()
        )
      id = id + 1
    end
  end
  
  currentMap = mapsTable[twoDimMap] 
  local rowlenght = #currentMap
  local collenght = #currentMap[1]
  
  currentMapH = rowlenght*TILE_HEIGHT
  currentMapW = collenght*TILE_WIDTH
  
end

function drawMap()
  -- Draw map
  local row, col
  local x, y
  
  currentMap = mapsTable[twoDimMap] 
  local rowlenght = #currentMap
  local collenght = #currentMap[1]
  
  currentMapH = rowlenght*TILE_HEIGHT
  currentMapW = collenght*TILE_WIDTH
  
  x = 0
  y = 0
  for row = 1, rowlenght do
    for col = 1, collenght do
      -- Draw tile
      local tile = currentMap[row][col]
      local texQuad = tileTextures[tile]
      if tile > 0 then
        love.graphics.draw(tileSheet, texQuad, x, y, 0, 1, 1)
      end
      x = x + TILE_WIDTH
    end
    x = 0
    y = y + TILE_HEIGHT
  end
end

function populatePanelTables()
  table.insert(centerPanelsTable, twoDimMap_C1)
  
  table.insert(leftPanelsTable, twoDimMap_L1)
  
  table.insert(rightPanelsTable, twoDimMap_R1)
  
  table.insert(otherPanelsTable, twoDimMap_O1)
  table.insert(otherPanelsTable, twoDimMap_O2)
end
